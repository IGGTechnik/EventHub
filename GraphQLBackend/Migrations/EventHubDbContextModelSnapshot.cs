// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using graphQLBackend.Services;

#nullable disable

namespace graphQLBackend.Migrations
{
    [DbContext(typeof(EventHubDbContext))]
    partial class EventHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EventsInventory", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("char(36)");

                    b.HasKey("EventsId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("EventsInventory");
                });

            modelBuilder.Entity("EventsPackages", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PackagesId")
                        .HasColumnType("char(36)");

                    b.HasKey("EventsId", "PackagesId");

                    b.HasIndex("PackagesId");

                    b.ToTable("EventsPackages");
                });

            modelBuilder.Entity("InventoryPackages", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PackagesId")
                        .HasColumnType("char(36)");

                    b.HasKey("InventoryId", "PackagesId");

                    b.HasIndex("PackagesId");

                    b.ToTable("InventoryPackages");
                });

            modelBuilder.Entity("graphQLBackend.DTOs.Events", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time(6)");

                    b.Property<bool>("KioskPossible")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Pax")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("SeatingTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("graphQLBackend.DTOs.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("graphQLBackend.DTOs.Packages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("EventsInventory", b =>
                {
                    b.HasOne("graphQLBackend.DTOs.Events", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graphQLBackend.DTOs.Inventory", null)
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventsPackages", b =>
                {
                    b.HasOne("graphQLBackend.DTOs.Events", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graphQLBackend.DTOs.Packages", null)
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryPackages", b =>
                {
                    b.HasOne("graphQLBackend.DTOs.Inventory", null)
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("graphQLBackend.DTOs.Packages", null)
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
